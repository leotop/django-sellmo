(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
require("./product");

require("./address");



},{"./address":2,"./product":3}],2:[function(require,module,exports){
var slice = [].slice;

(function($, window) {
  var CopyAddress;
  CopyAddress = (function() {
    CopyAddress.prototype.defaults = {
      fromSelector: '#shipping-address',
      toSelector: '#billing-address'
    };

    function CopyAddress(el, options) {
      this.options = $.extend({}, this.defaults, options);
      this.$el = $(el);
      this.$from = $(this.options.fromSelector);
      this.$to = $(this.options.toSelector);
      this.$from.on('change', (function(_this) {
        return function() {
          return _this.update();
        };
      })(this));
      this.$el.on('change', (function(_this) {
        return function() {
          return _this.update();
        };
      })(this));
      this.update();
    }

    CopyAddress.prototype.update = function() {
      if (this.$el.is(':checked')) {
        this.$to.hide();
        return $('input', this.$from).each(function(i, el) {
          var selector;
          selector = 'input.' + $(el).attr('class').split(' ')[0];
          return $(selector, this.$to).val($(selector, this.$from).val());
        });
      } else {
        return this.$to.show();
      }
    };

    return CopyAddress;

  })();
  return $.fn.extend({
    copyAddress: function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data('copyAddress');
        if (!data) {
          $this.data('copyAddress', (data = new CopyAddress(this, option)));
        }
        if (typeof option === 'string') {
          return data[option].apply(data, args);
        }
      });
    }
  });
})(window.jQuery, window);



},{}],3:[function(require,module,exports){
var slice = [].slice;

(function($, window) {
  var ProductAvailability;
  ProductAvailability = (function() {
    ProductAvailability.prototype.defaults = {
      availabilitySelector: '.product-availability',
      templateSelector: '#product-availability-template',
      template: null,
      stocks: null,
      delays: null,
      stock: null,
      delay: null
    };

    function ProductAvailability(el, options) {
      var template;
      this.options = $.extend({}, this.defaults, options);
      this.$el = $(el);
      if (!this.options.template) {
        template = $(this.options.templateSelector).html();
      } else {
        template = $(this.options.template);
      }
      this.template = Handlebars.compile(template);
      this.updateAvailability();
      this.$variation = $('select.variation', this.$el);
      $('option', this.$variation).each((function(_this) {
        return function(i, option) {
          var $option, key, stock;
          $option = $(option);
          key = $option.val();
          stock = _this.options.stocks[key];
          if (stock > 0) {
            _this.$variation.val(key);
            _this.updateAvailability();
            return false;
          }
        };
      })(this));
      this.$variation.on('change', (function(_this) {
        return function(evt) {
          return _this.updateAvailability();
        };
      })(this));
    }

    ProductAvailability.prototype.updateAvailability = function() {
      var available, context, delay, key, select, stock;
      if (this.options.stocks !== null) {
        select = $('select.variation', this.$el);
        key = select.val();
        stock = this.options.stocks[key];
        delay = this.options.delays[key];
      } else {
        stock = this.options.stock;
        delay = this.options.delay;
      }
      available = stock > 0 || delay !== false;
      if (available) {
        $('input[type=submit]', this.$el).removeAttr('disabled', 'disabled');
      } else {
        $('input[type=submit]', this.$el).attr('disabled', 'disabled');
      }
      context = {
        stock: stock,
        delay: delay,
        available: available
      };
      return $(this.options.availabilitySelector, this.$el).html(this.template(context));
    };

    return ProductAvailability;

  })();
  return $.fn.extend({
    productAvailability: function() {
      var args, option;
      option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.each(function() {
        var $this, data;
        $this = $(this);
        data = $this.data('productAvailability');
        if (!data) {
          $this.data('productAvailability', (data = new ProductAvailability(this, option)));
        }
        if (typeof option === 'string') {
          return data[option].apply(data, args);
        }
      });
    }
  });
})(window.jQuery, window);



},{}]},{},[1])


//# sourceMappingURL=data:application/json;base64,